{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","selectedTemplate","setSelectedTemplate","captions","setCaptions","memeImage","setMemeImage","useEffect","fetch","then","fetchedData","ok","json","memeJson","memeData","data","memes","randomIndex","Math","floor","random","length","url","box_count","Array","fill","params","FormData","append","id","forEach","caption","index","method","body","res","resJson","success","className","map","key","type","onChange","e","captionValue","target","value","captionIndex","setCaption","onClick","preventDefault","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAuHeA,MArHf,WAEE,MAA+CC,qBAA/C,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAiCJ,qBAAjC,mBAAOK,EAAP,KAAiBC,EAAjB,KA2EA,OAzEAC,qBAAU,WACRH,EAAY,IACZF,IACAM,MAAM,qCAAqCC,MAAK,SAACC,GAC/C,GAAGA,EAAYC,GAEb,OAAOD,EAAYE,UAEpBH,MAAK,SAACI,GACP,IAAIC,EAAWD,EAASE,KAAKC,MACzBC,EAAcC,KAAKC,MAAMD,KAAKE,SAASN,EAASO,QACpDnB,EAAoBY,EAASG,IAC7BX,EAAaQ,EAASG,GAAaK,UAEpC,IAEHf,qBAAU,WACLN,GAAoBA,EAAiBsB,WAEtCnB,EAAY,IAAIoB,MAAMvB,EAAiBsB,WAAWE,KAAK,OAExD,CAACxB,IAiBJM,qBAAU,WAER,GAAGJ,EAASkB,OAAS,EACrB,CACE,IAAMK,EAAS,IAAIC,SACnBD,EAAOE,OAAO,WAAW,gBACzBF,EAAOE,OAAO,WAAW,gBACzBF,EAAOE,OAAO,cAAd,OAA4B3B,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAkB4B,IAE9C1B,EAAS2B,SAAQ,SAACC,EAAQC,GACxBN,EAAOE,OAAP,gBAAuBI,EAAvB,WAAsCD,MAGxCvB,MAAM,wCAAwC,CAC5CyB,OAAS,OACTC,KAAOR,IACNjB,MAAK,SAAA0B,GACN,GAAGA,EAAIxB,GAEL,OAAOwB,EAAIvB,UAEZH,MAAK,SAAC2B,GACJA,EAAQC,SAET/B,EAAa8B,EAAQrB,KAAKO,WAI/B,CAACnB,EAAD,OAAUF,QAAV,IAAUA,OAAV,EAAUA,EAAkB4B,KAQ7B,qBAAKS,UAAU,YAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,WAAf,iBACM,sBAAMA,UAAU,aAAhB,uBAEN,sBAAKA,UAAU,kBAAf,UACE,0DAA4B,sBAAMA,UAAU,aAAhB,4BAA5B,yCACE,uBAAMA,UAAU,YAAhB,UACGnC,GAAYA,EAASoC,KAAI,SAACR,EAAQS,GAC/B,OACE,qCACE,+CAAuCA,EAAM,IAA7C,gBAAqBA,IACrB,uBAAOC,KAAK,OAAOC,SAAU,SAACC,IAhE1D,SAAoBA,EAAEX,GAEpB,IAAIY,EAAeD,EAAEE,OAAOC,OAAS,GAErC1C,EAAYD,EAASoC,KAAI,SAACR,EAAQgB,GAChC,OAAGA,IAAiBf,EAEXY,EAGAb,MAsDkDiB,CAAWL,EAAEH,KAAYA,SAKrEnC,GACG,wBAAQiC,UAAU,WAAWW,QAzBnD,SAAkBN,GAEhBA,EAAEO,kBAuBkB,kCAQb,qBAAKZ,UAAU,mBAAf,SACMjC,GACG,qBAAK8C,IAAK9C,EAAWiC,UAAU,gBAAgBc,IAAI,iBCnGxDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.bba1477e.chunk.js","sourcesContent":["import './App.css';\nimport {useEffect, useState} from 'react'\nfunction App() {\n\n  const [selectedTemplate,setSelectedTemplate] = useState()\n  const [captions,setCaptions] = useState([])\n  const [memeImage,setMemeImage] = useState()\n\n  useEffect(() => {\n    setCaptions([])\n    setSelectedTemplate()\n    fetch(\"https://api.imgflip.com/get_memes\").then((fetchedData)=>{\n      if(fetchedData.ok)\n      {\n        return fetchedData.json()\n      }\n    }).then((memeJson)=>{\n      var memeData = memeJson.data.memes\n      var randomIndex = Math.floor(Math.random()*memeData.length)\n      setSelectedTemplate(memeData[randomIndex])\n      setMemeImage(memeData[randomIndex].url)\n    })\n  }, [])\n\n  useEffect(() => {\n    if(selectedTemplate && selectedTemplate.box_count)\n    {\n      setCaptions(new Array(selectedTemplate.box_count).fill(\"\"))\n    }\n  }, [selectedTemplate ])\n\n  function setCaption(e,index)\n  {\n    var captionValue = e.target.value || \"\"\n    \n    setCaptions(captions.map((caption,captionIndex)=>{\n      if(captionIndex === index)\n      {\n        return captionValue\n      }else\n      {\n        return caption\n      }\n    }))\n  }\n\n  useEffect(() => {\n\n    if(captions.length > 0)\n    {\n      const params = new FormData();\n      params.append(\"username\",\"aritrabasu71\")\n      params.append(\"password\",\"aritrabasu71\")\n      params.append(\"template_id\",selectedTemplate?.id)\n\n      captions.forEach((caption,index) => {\n        params.append(`boxes[${index}][text]`,caption)\n      });\n\n      fetch(\"https://api.imgflip.com/caption_image\",{\n        method : 'POST',\n        body : params\n      }).then(res =>{\n        if(res.ok)\n        {\n          return res.json()\n        }\n      }).then((resJson)=>{\n        if(resJson.success)\n        {\n          setMemeImage(resJson.data.url)\n        }\n      })\n    }\n  }, [captions,selectedTemplate?.id])\n\n  function postMeme(e)\n  {\n    e.preventDefault()\n  }\n\n  return (\n    <div className=\"container\">\n        <div className=\"row bg-design\">\n            <div className=\"col\">\n                <div className=\"app-name\">\n                  Meme<span className=\"text-theme\">Opedia</span>\n                </div>\n                <div className=\"app-description\">\n                  <p>Hey Buddy let's complete <span className=\"text-theme\"> this mission </span> and make her laugh !! ðŸ˜‰</p>\n                    <form className=\"meme-form\">\n                      {captions && captions.map((caption,key)=>{\n                          return (\n                            <>\n                              <label key={`label-${key}`}>Caption - {key + 1}</label>\n                              <input type=\"text\" onChange={(e)=>{setCaption(e,key)}} key={key} />\n                            </>\n                          )\n                      })}\n\n                    {memeImage && (\n                        <button className=\"post-btn\" onClick={postMeme}> Post Meme </button>\n                    )}\n                    </form>\n                    \n                    \n\n                </div>\n            </div>\n           <div className=\"col image-holder\">\n                {memeImage &&\n                    <img src={memeImage} className=\"meme-template\" alt=\"meme\" />\n                }\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}